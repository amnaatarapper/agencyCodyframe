// Style Navbar on scroll event
window.addEventListener('scroll', () => {
  let header = document.querySelector('header');
  header.classList.toggle('scroll', window.scrollY > 0);
});

// // Parallax Effect on Hero BG on mouse mouvement
// window.addEventListener('mousemove', (e) => {
//     let heroBg = document.querySelector('.hero__bg');

//     let mouseX = e.clientX / 100;
//     let mouseY = e.clientY / 100;
//     heroBg.style.backgroundPosition = -mouseX + "px " + -mouseY + "px";
// });

// Loader

const loader = document.createElement('div');
loader.className = 'loader';
const body = document.querySelector('body');
body.appendChild(loader);

loader.innerHTML = `
<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: rgba(255, 255, 255, 0); display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
<g>
<circle cx="68.3979" cy="50" r="4" fill="#e15b64">
  <animate attributeName="cx" repeatCount="indefinite" dur="1s" values="95;35" keyTimes="0;1" begin="-0.67s"></animate>
  <animate attributeName="fill-opacity" repeatCount="indefinite" dur="1s" values="0;1;1" keyTimes="0;0.2;1" begin="-0.67s"></animate>
</circle>
<circle cx="88.7979" cy="50" r="4" fill="#e15b64">
  <animate attributeName="cx" repeatCount="indefinite" dur="1s" values="95;35" keyTimes="0;1" begin="-0.33s"></animate>
  <animate attributeName="fill-opacity" repeatCount="indefinite" dur="1s" values="0;1;1" keyTimes="0;0.2;1" begin="-0.33s"></animate>
</circle>
<circle cx="48.5979" cy="50" r="4" fill="#e15b64">
  <animate attributeName="cx" repeatCount="indefinite" dur="1s" values="95;35" keyTimes="0;1" begin="0s"></animate>
  <animate attributeName="fill-opacity" repeatCount="indefinite" dur="1s" values="0;1;1" keyTimes="0;0.2;1" begin="0s"></animate>
</circle>
</g><g transform="translate(-15 0)">
<path d="M50 50L20 50A30 30 0 0 0 80 50Z" fill="#f8b26a" transform="rotate(90 50 50)"></path>
<path d="M50 50L20 50A30 30 0 0 0 80 50Z" fill="#f8b26a" transform="rotate(20.3969 50 50)">
  <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s" values="0 50 50;45 50 50;0 50 50" keyTimes="0;0.5;1"></animateTransform>
</path>
<path d="M50 50L20 50A30 30 0 0 1 80 50Z" fill="#f8b26a" transform="rotate(-20.3969 50 50)">
  <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s" values="0 50 50;-45 50 50;0 50 50" keyTimes="0;0.5;1"></animateTransform>
</path>
</g>
<!-- [ldio] generated by https://loading.io/ --></svg>`;


function loading() {
  body.removeChild(loader);
};


// Genie

const allCircles = document.querySelectorAll('[data-genie]');
const circles = [].slice.call(allCircles);

circles.forEach(circle => {
  circle.addEventListener('mouseover', (event) => {

    const target = event.target;
    const current = target.parentNode.parentNode;
    const next = current.nextSibling.nextSibling;
    const prev = current.previousSibling.previousSibling;

    // Previous
    if (prev && prev.childNodes[3].classList.contains('circle')) {
      prev.childNodes[3].style.transform = 'scale(1.1)';
      prev.childNodes[3].style.transition = 'transform .8s';
    }

    // Current
    current.childNodes[3].style.transform = 'scale(1.3)';
    current.childNodes[3].style.transition = 'transform .4s';

    // Next
    if (next && next.childNodes[3].classList.contains('circle')) {
      next.childNodes[3].style.transform = 'scale(1.1)';
      next.childNodes[3].style.transition = 'transform .8s';
    }
  });

  circle.addEventListener('mouseout', (event) => {

    const target = event.target;
    const current = target.parentNode.parentNode;
    const next = current.nextSibling.nextSibling;
    const prev = current.previousSibling.previousSibling;

    if (prev && prev.childNodes[3].classList.contains('circle')) {
      prev.childNodes[3].style.transform = 'scale(1)';
    }

    current.childNodes[3].style.transform = 'scale(1)';

    if (next && next.childNodes[3].classList.contains('circle')) {
      next.childNodes[3].style.transform = 'scale(1)';
    }
  });
});

const form = document.querySelector('form');
const submit = document.querySelector('[type=submit]')
submit.addEventListener('click', e => {
  e.preventDefault();
  form.classList.toggle('validated');
})

